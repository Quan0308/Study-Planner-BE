name: CI and Deploy

on:
  push:
    branches:
      - develop
      - main

permissions:
  actions: read
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Set environment dynamically based on branch
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      # Step 1: Checkout repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 3: Build Docker image with arguments for SERVICE_NAME and STAGE
      - name: Build Docker image
        env:
          TAG: ${{ vars.TAG }}
          PRIVATE_TOKEN: ${{ secrets.PRIVATE_TOKEN }}
        run: |
          docker build --file docker/Dockerfile \
            --build-arg SERVICE_NAME=main-api \
            --build-arg STAGE=$TAG \
            --build-arg PRIVATE_TOKEN=$PRIVATE_TOKEN \
            -t duyquan0308/study-planner-api:$TAG .

      # Step 4: Log in to Docker Hub or Amazon ECR (Use secrets for credentials)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 5: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        env:
          TAG: ${{ vars.TAG }}
        run: |
          docker push duyquan0308/study-planner-api:$TAG

      # Step 6: SSH to EC2 and run the Docker container
      - name: Deploy to EC2 via SSH
        env:
          EC2_USER: ubuntu # Adjust if your EC2 uses a different user
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
          TAG: ${{ vars.TAG }}
          PORT: ${{ vars.PORT }}
        run: |
          echo "PASSED TAG: $TAG"
          # Save the SSH private key
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/ec2-key.pem
          chmod 600 ~/.ssh/ec2-key.pem

          # Add the EC2 host to known hosts
          ssh-keyscan -v -H $EC2_HOST >> ~/.ssh/known_hosts

          # Connect via SSH to deploy
          ssh -i ~/.ssh/ec2-key.pem $EC2_USER@$EC2_HOST \
            "set -e && \
            export TAG=${TAG} && \
            export PORT=${PORT} && \
            echo 'TAG: $TAG' && \
            echo 'PORT: $PORT' && \
            
            # Check if Docker is installed
            if ! command -v docker &> /dev/null; then
              echo 'Docker not found, installing Docker...' && \
              sudo apt-get update && \
              sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common && \
              curl -fsSL https://get.docker.com -o get-docker.sh && \
              sudo sh get-docker.sh && \
              sudo usermod -aG docker \$USER && \
              newgrp docker; \
            fi && \

           
            # Stop and remove any existing container
            echo 'remove container with name: study-planner-api-$TAG' && \
            docker ps -a --filter 'name=study-planner-api-$TAG' -q | xargs -r docker stop | xargs -r docker rm && \

            #prune all volumes
            docker system prune -a --volumes -f && \

           # Pull the latest Docker image
            echo 'Pulling Docker image from Docker Hub...' && \
            docker pull duyquan0308/study-planner-api:\$TAG && \


            # Run the Docker container
            echo 'Starting Docker container on port $PORT' && \
            docker run -d -p $PORT:8000 --name study-planner-api-\$TAG \
              duyquan0308/study-planner-api:\$TAG && \

            echo 'Deployment complete!'"
